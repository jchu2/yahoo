public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if(nums==null || nums.length==0) return result;
        Arrays.sort(nums);
        dfs(result, new ArrayList<Integer>(), new boolean[nums.length], nums);
        return result;
    }
    public void dfs(List<List<Integer>> res, List<Integer> path, boolean[] used, int[] nums){
        if(path.size() == nums.length) {
            res.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i = 0; i < nums.length; i++) {
            if(used[i]) continue;
            if(i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) continue; //easy to miss used[i - 1]
            used[i] = true;
            path.add(nums[i]);
            dfs(res, path, used, nums);
            used[i] = false;
            path.remove(path.size() - 1);
        }
    }
}
