i
public class Solution {
    public int rob(int[] num) {
        int prevNo = 0, prevYes = 0;
        for (int n : num) {
            int temp = prevNo;
            prevNo = Math.max(prevNo, prevYes);//if not rob ith house, take the max value of robbed (i-1)th house and not rob (i-1)th house
            prevYes = n + temp;//if rob current value, previous house must not be robbed
        }
        return Math.max(prevNo, prevYes);
    }
}

ii
public class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) return nums[0];
        return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));
    }
    private int rob(int[] num, int lo, int hi) {
        int prevNo = 0, prevYes = 0;
        for (int j = lo; j <= hi; j++) {
            int temp = prevNo;
            prevNo = Math.max(prevNo, prevYes);
            prevYes = num[j] + temp;
        }
        return Math.max(prevNo, prevYes);
    }
}

iii
public class Solution {
    public int rob(TreeNode root) {
        int[] num = dfs(root);
        return Math.max(num[0], num[1]);
    }
    private int[] dfs(TreeNode x) {
        if (x == null) return new int[2];
        int[] left = dfs(x.left), right = dfs(x.right), res = new int[2];
        res[0] = left[1] + right[1] + x.val;
        res[1] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
        return res;
    }
}
