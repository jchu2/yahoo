public class Solution {
    public int kthSmallest(TreeNode root, int k) {
         Stack<TreeNode> stack = new Stack<>();
         TreeNode p = root;
         int count = 0;
         while(!stack.isEmpty() || p != null) {
             if(p != null) {
                 stack.push(p);  // Just like recursion
                 p = p.left;   
             } else {
                TreeNode node = stack.pop();
                if(++count == k) return node.val; //key
                p = node.right;
             }
         }
         return Integer.MIN_VALUE;
     }
}


public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        while(curr != null || !stack.empty()) {
            while(curr != null) {
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop();
            result.add(curr.val);
            curr = curr.right;
        }
        return result;
    }
}
