    public static void bubbleSort(int[] data) {
        // move backward from the last index
        for (int out = data.length - 1; out >= 1; out--) {
            // move forward from the beginning
            // bubble up the largest value to the right
            for (int in = 0; in < out; in++) {
                if (data[in] > data[in + 1]) {
                    swap(data, in, in + 1);
                }
            }
        }
    }

    /**
     * Selection sort runs in O(n^2) too.
     * Focus on the smallest value!
     * Faster than bubble sort mainly due to less number of swaps.
     * @param data an array of int to sort
     */
    public static void selectionSort(int[] data) {
        for (int out = 0; out < data.length - 1; out++) {
            int min = out;
            for (int in = out + 1; in < data.length; in++) {
                if (data[in] < data[min]) {
                    min = in;
                }
            }
            // swap is outside of the inner loop
            if (out != min) {
                swap(data, out, min);
            }
        }
    }

    /**
     * Insertion sort runs in O(n^2) in the worst case.
     * But its best case running time complexity is O(n).
     * It is the fastest among the three.
     * Sensitive to the input values.
     *
     * Less number of comparisons on average.
     * Uses shifting (copying) instead of swapping (one swap equals to three copies).
     * @param data an array of int to sort
     */
    public static void insertionSort(int[] data) {
        // start from the 1st index till the last index
        for (int out = 1; out < data.length; out++) {
            int tmp = data[out]; // store the value temporarily
            int in = out; // initially set to be the same as out

            /*
             * loop to check the sorted section going backward
             * but not necessarily all the way to the 0th
             * On average, look halfway through the sorted section
             */
            while (in > 0 && data[in - 1] >= tmp) {
                data[in] = data[in - 1]; // shift to right
                in--;
            }
            if(out != in) {
                data[in] = tmp;
            }
        }
    }
