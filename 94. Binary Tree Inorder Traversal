public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        while(curr != null || !stack.empty()) {
            while(curr != null) {
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop();
            result.add(curr.val);
            curr = curr.right;
        }
        return result;
    }
}
/*
http://www.codebytes.in/2014/12/finding-in-order-successor-of-given.html
*/

Node getInorderSuccessor(Node node){
    //If it is the last node in the Inorder Traversal, return null.
    if(node == null)return null;
    
    //If the target node has a right child, then the answer will be the left most child for the right subtree.
    if(node.right != null){
        node = node.right;
        while(node.left!=null)node= node.left;
        return node;
    }
    
    //If the target node does not have a child, then the answer will be the parent of this node.
    Node prev = node;
    node = node.parent; 
    while(node!= null && prev!=node.left){
        prev = node;
        node = node.parent;
    }
    return node;
}
